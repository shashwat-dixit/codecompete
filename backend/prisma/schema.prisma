// This is your Prisma schema file

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}

enum SubmissionStatus {
    PENDING
    RUNNING
    ACCEPTED
    WRONG_ANSWER
    TIME_LIMIT_EXCEEDED
    MEMORY_LIMIT_EXCEEDED
    RUNTIME_ERROR
    COMPILATION_ERROR
}

enum QuestionProgressStatus {
    NOT_STARTED
    ATTEMPTED
    SOLVED
}

model User {
    id        String   @id @default(uuid()) @db.Uuid
    username  String   @unique
    email     String   @unique
    rating    Int      @default(1200)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    submissions   Submission[]
    progress      UserQuestionProgress[]
    ratingHistory RatingHistory[]

    @@index([rating])
}

model Question {
    id          String     @id @default(uuid()) @db.Uuid
    title       String
    description String
    difficulty  Difficulty
    categories  String[]
    testCases   Json
    timeLimit   Int // in milliseconds
    memoryLimit Int // in megabytes
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    submissions   Submission[]
    progress      UserQuestionProgress[]
    RatingHistory RatingHistory[]

    @@index([difficulty])
    @@index([categories])
}

model Submission {
    id         String           @id @default(uuid()) @db.Uuid
    userId     String           @db.Uuid
    questionId String           @db.Uuid
    code       String           @db.Text
    language   String
    status     SubmissionStatus
    runtime    Int? // in milliseconds
    memory     Int? // in kilobytes
    s3CodeUrl  String?
    createdAt  DateTime         @default(now())

    user          User            @relation(fields: [userId], references: [id])
    question      Question        @relation(fields: [questionId], references: [id])
    testResults   TestResult[]
    RatingHistory RatingHistory[]

    @@index([userId])
    @@index([questionId])
    @@index([status])
    @@index([createdAt])
}

model TestResult {
    id             String  @id @default(uuid()) @db.Uuid
    submissionId   String  @db.Uuid
    testCaseNumber Int
    passed         Boolean
    output         String? @db.Text
    errorMessage   String? @db.Text
    executionTime  Int? // in milliseconds
    memoryUsed     Int? // in kilobytes

    submission Submission @relation(fields: [submissionId], references: [id])

    @@index([submissionId])
}

model UserQuestionProgress {
    id            String                 @id @default(uuid()) @db.Uuid
    userId        String                 @db.Uuid
    questionId    String                 @db.Uuid
    status        QuestionProgressStatus @default(NOT_STARTED)
    attemptCount  Int                    @default(0)
    bestRuntime   Int? // in milliseconds
    bestMemory    Int? // in kilobytes
    lastAttemptAt DateTime?

    user     User     @relation(fields: [userId], references: [id])
    question Question @relation(fields: [questionId], references: [id])

    @@unique([userId, questionId])
    @@index([userId])
    @@index([questionId])
}

model RatingHistory {
    id           String   @id @default(uuid()) @db.Uuid
    userId       String   @db.Uuid
    questionId   String   @db.Uuid
    submissionId String   @db.Uuid
    oldRating    Int
    newRating    Int
    ratingChange Int
    createdAt    DateTime @default(now())

    user       User       @relation(fields: [userId], references: [id])
    question   Question   @relation(fields: [questionId], references: [id])
    submission Submission @relation(fields: [submissionId], references: [id])

    @@index([userId])
    @@index([createdAt])
}
